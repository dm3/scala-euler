class InfiniteIterable[S, E](init: S, calcNext: Array[S] => E) extends Iterable.Projection[E] {
    override val hasDefiniteSize, isEmpty = false

    def elements = new Iterator[E] {
        val state: Array[S] = new Array[S](1);
        state(0) = init
        val hasNext = true

        def next = calcNext(state)
    }
}

object Util {

    // 1, 2, 3, 4, ...
    def ints(n: Int): Stream[Int] = Stream.cons(n, ints(n + 1))

    // 2, 3, 5, 7, 11, ...
    def primes(nums: Stream[Int]): Stream[Int] = Stream.cons(nums head,
            primes((nums tail) filter (_ % nums.head != 0)))

    /**
    * The sequence of triangle numbers is generated by adding the natural numbers.
    * So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
    */
    def triangles(nums: Stream[Int]): Stream[Int] = Stream.cons(nums head,
            triangles(Stream.cons(nums.head + nums.tail.head, nums.tail drop 1)))
}